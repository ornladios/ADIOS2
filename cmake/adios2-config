#!/usr/bin/env python

import difflib
import os
import shlex
import subprocess
import sys
import tempfile


CMAKELISTS = """
cmake_minimum_required(VERSION 3.6)
if(POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW)
endif()

project(find_adios2 CXX C)

find_package(ADIOS2 REQUIRED)

set(src "${CMAKE_CURRENT_BINARY_DIR}/src.cxx")
file(WRITE "${src}" "
int main(int argc, char* argv[]) {
  (void)argc;
  (void)argv;
  return 0;
}
")

add_executable(with_adios2 "${src}")

target_compile_definitions(with_adios2 PRIVATE WITH_ADIOS2)
target_link_libraries(with_adios2 PRIVATE adios2::adios2 -LWITH_ADIOS2)

add_executable(without_adios2 "${src}")
target_compile_definitions(without_adios2 PRIVATE WITHOUT_ADIOS2)
target_link_libraries(without_adios2 PRIVATE -LWITHOUT_ADIOS2)
"""


def diff_commands(a, b):
    a_args = shlex.split(a)
    b_args = shlex.split(b)

    a_flags = []
    b_flags = []
    if sys.version_info[0] > 2 or (sys.version_info[0] == 2 and sys.version_info[1] >= 7):
        differ = difflib.SequenceMatcher(a=a_args, b=b_args, autojunk=False)
    else:
        differ = difflib.SequenceMatcher(a=a_args, b=b_args)

    for tag, i1, i2, j1, j2 in differ.get_opcodes():
        if tag in ('delete', 'replace'):
            a_flags.extend(a_args[i1:i2])
        if tag in ('insert', 'replace'):
            b_flags.extend(b_args[j1:j2])
    return (a_flags, b_flags)


def test_diff_commands():
    cmd_a = 'prog -lcommon a_different common'
    cmd_b = 'prog -lcommon b_different common'
    (a_flags, b_flags) = diff_commands(cmd_a, cmd_b)
    assert a_flags == ['a_different']
    assert b_flags == ['b_different']


def extract_flags(compile_with, compile_without, link_with, link_without):
    (_, compile_flags) = diff_commands(compile_without, compile_with)
    (_, link_flags) = diff_commands(link_without, link_with)

    # Remove our marker flags.
    compile_flags.remove('-DWITH_ADIOS2')
    link_flags.remove('-LWITH_ADIOS2')

    # Remove target-specific flags.
    def is_target_specific(arg):
        return arg.find('with_adios2') > -1
    compile_flags = [
        flag for flag in compile_flags if not is_target_specific(flag)]
    link_flags = [flag for flag in link_flags if not is_target_specific(flag)]

    return (compile_flags, link_flags)


def test_extract_flags():
    cmd_without_compile = \
        'compiler -DWITHOUT_ADIOS2 -o without_adios2.dir/src.cxx.o src.cxx'
    cmd_without_link = \
        'compiler -LWITHOUT_ADIOS2 with_adios2.dir/src.cxx.o'
    cmd_with_compile = \
        'compiler -DWITH_ADIOS2 -I/path/to/adios2/includes -o with_adios2.dir/src.cxx.o src.cxx'
    cmd_with_link = \
        'compiler -LWITH_ADIOS2 /path/to/libadios2.so with_adios2.dir/src.cxx.o'
    (compile_flags, link_flags) = \
        extract_flags(cmd_with_compile, cmd_without_compile, cmd_with_link,
                      cmd_without_link)
    assert compile_flags == ['-I/path/to/adios2/includes']
    assert link_flags == ['/path/to/libadios2.so']


def extract_adios2_flags(cmake='cmake',
                           generator='Unix Makefiles',
                           adios2_dir=None):
    cmake_format = {}

    def tempdir():
        if sys.version_info[0] == 3:
            return tempfile.TemporaryDirectory()
        else:
            class DummyTemporaryDirectory:
                def __init__(self):
                    self._dir = tempfile.mkdtemp()

                def __enter__(self):
                    return self._dir

                def __exit__(self, *args):
                    #import shutil
                    #shutil.rmtree(self._dir)
                    return

            return DummyTemporaryDirectory()

    with tempdir() as workdir:
        srcdir = os.path.join(workdir, 'src')
        builddir = os.path.join(workdir, 'build')

        os.mkdir(srcdir)
        os.mkdir(builddir)

        # Write the CMake file.
        with open(os.path.join(srcdir, 'CMakeLists.txt'), 'w+') as fout:
            fout.write(CMAKELISTS % cmake_format)

        # Configure the build tree.
        configure_cmd = [
            cmake,
            '-G' + generator,
            srcdir,
        ]

        if adios2_dir is not None:
            configure_cmd.append('-DADIOS2_DIR:PATH=' + adios2_dir)
            print('ADIOS2_DIR:  ' + adios2_dir)
        elif 'ADIOS2_DIR' not in os.environ and 'ADIOS2_ROOT' not in os.environ:
            os.environ['ADIOS2_DIR'] = \
                os.path.realpath(os.path.join(os.path.dirname(__file__), '..'))
            print('ADIOS2_DIR:  ' + os.environ['ADIOS2_DIR'])
        else:
            if 'ADIOS2_ROOT' in os.environ:
                print('ADIOS2_ROOT: ' + os.environ['ADIOS2_ROOT'])
            if 'ADIOS2_DIR' in os.environ:
                print('ADIOS2_DIR:  ' + os.environ['ADIOS2_DIR'])

        if sys.version_info[0] == 3:
            stdout = subprocess.DEVNULL
        else:
            stdout = open('/dev/null', 'w')

        subprocess.check_call(configure_cmd, cwd=builddir,
                              stdout=stdout)
        if sys.version_info[0] == 2:
            stdout.close()

        # Run the build tool.
        build_cmd = [
            cmake,
            '--build', '.',
            '--',
        ]
        build_env = os.environ.copy()
        if generator == 'Ninja':
            build_cmd.append('-n')
            build_cmd.append('-v')
            build_env['NINJA_STATUS'] = ''
        elif generator == 'Unix Makefiles':
            # This doesn't work because the link line is actually behind
            # another rule.
            # build_cmd.append('-n')
            build_cmd.append('VERBOSE=1')
        else:
            raise RuntimeError('Unsupported generator %s' % generator)
        build_output = subprocess.Popen(build_cmd,
                                        cwd=builddir,
                                        stdout=subprocess.PIPE,
                                        stderr=subprocess.STDOUT,
                                        env=build_env)

        lines = {}
        lines['compile_with'] = None
        lines['link_with'] = None
        lines['compile_without'] = None
        lines['link_without'] = None

        def check_line(lines, line, flag, key):
            if lines[key] is None and line.find(flag) > -1:
                lines[key] = line

        for line in build_output.stdout:
            if sys.version_info[0] > 2 or (sys.version_info[0] == 2 and sys.version_info[1] >= 7):
              line = line.decode('utf-8')
            line = line.strip()

            check_line(lines, line, '-DWITH_ADIOS2', 'compile_with')
            check_line(lines, line, '-LWITH_ADIOS2', 'link_with')
            check_line(lines, line, '-DWITHOUT_ADIOS2', 'compile_without')
            check_line(lines, line, '-LWITHOUT_ADIOS2', 'link_without')

        if not all(lines.values()):
            raise RuntimeError('missing some compile line outputs')

        return extract_flags(**lines)


if __name__ == '__main__':
    import optparse

    parser = optparse.OptionParser(
        description='Extract required flags for linking to ParaView')
    parser.add_option(
        '-C', '--cmake', metavar='CMAKE', default='cmake',
        dest='cmake',
        help='Path to CMake to use')
    parser.add_option(
        '-G', '--generator', metavar='GENERATOR', default='Unix Makefiles',
        choices=('Unix Makefiles', 'Ninja'), dest='generator',
        help='The CMake generator to use')
    parser.add_option(
        '-a', '--adios2', metavar='ADIOS2 DIR', default=None,
        dest='adios2_dir',
        help='Where to find ADIOS2Config.cmake')
    parser.add_option(
        '--cxxflags', action='store_true', default=False,
        dest='cxxflags',
        help='Print C++ compiler flags')
    parser.add_option(
        '--cxxlibs', action='store_true', default=False,
        dest='cxxldflags',
        help='Print C++ linker flags')

    (opts, args) = parser.parse_args()
    (compile_flags, link_flags) = \
        extract_adios2_flags(cmake=opts.cmake,
                               generator=opts.generator,
                               adios2_dir=opts.adios2_dir)
    if opts.cxxflags:
        print(' '.join(compile_flags))
    if opts.cxxldflags:
        print(' '.join(link_flags))
