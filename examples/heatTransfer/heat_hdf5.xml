<?xml version="1.0"?>
<!-- Config XML file fo the  
     - heatTransfer_write_adios2 
     - heatTransfer_read
     executables in build/bin -->

<adios-config>

    <!--====================================
           Configuration for the Writer 
        ====================================-->

    <io name="writer">
        <engine type="HDF5">
            
            <!-- for vectorized memory operations, make sure your system 
                 enables threads--> 
            <parameter key="Threads" value="2"/>

            <!-- Microseconds (default), Milliseconds, Seconds, 
                 Minutes, Hours -->
            <parameter key="ProfileUnits" value="Microseconds"/>

            <!-- XXKb, XXMb, or XXXGb supported, default=16Kb 
                (applications might choose an optimal value) -->
            <parameter key="InitialBufferSize" value="16Kb"/> 
            
            <!-- XXKb, XXMb, or XXXGb supported, default=Unlimited (until 
                 fails), maximum at each time step  
                (applications might choose an optimal value) -->
            <!-- <parameter key="MaxBufferSize" value="2Gb"/> -->

            <!-- exponential growth factor > 1, default = 1.05 
                 1.05  is good for a few large variables, for many small
                 variables increase the value to 1.5 to 2 
                 (optimal value is application dependent)--> 
            <!-- <parameter key="BufferGrowthFactor" value="1.05"/> -->
            
        </engine>

        <transport type="File">
            
            <!-- POSIX, stdio (C FILE*), fstream (C++) -->
            <parameter key="Library" value="stdio"/>
            
            <!-- For read/write, Microseconds (default), Milliseconds, Seconds, 
                 Minutes, Hours. open/close always in Microseconds -->
            <parameter key="ProfileUnits" value="Microseconds"/>
            
        </transport>
        
    </io>



    <!--=======================================
           Configuration for the Reader input
        =======================================-->

    <io name="readerInput">
       <engine type="HDF5"> 
            
            <!-- for vectorized memory operations, make sure your system 
                 enables threads--> 
            <parameter key="Threads" value="2"/>

            <!-- Microseconds (default), Milliseconds, Seconds, 
                 Minutes, Hours -->
            <parameter key="ProfileUnits" value="Microseconds"/>

        </engine>

        <transport type="File">
            
            <!-- POSIX, stdio (C FILE*), fstream (C++) -->
            <parameter key="Library" value="stdio"/>
            
            <!-- For read/write, Microseconds (default), Milliseconds, Seconds, 
                 Minutes, Hours. open/close always in Microseconds -->
            <parameter key="ProfileUnits" value="Microseconds"/>
            
        </transport>
        
    </io>



    <!--=======================================
           Configuration for the Reader output
        =======================================-->

    <io name="readerOutput">
       <engine type="HDF5"> 
            
            <!-- for vectorized memory operations, make sure your system 
                 enables threads--> 
            <parameter key="Threads" value="2"/>

            <!-- Microseconds (default), Milliseconds, Seconds, 
                 Minutes, Hours -->
            <parameter key="ProfileUnits" value="Microseconds"/>

        </engine>

        <transport type="File">
            
            <!-- POSIX, stdio (C FILE*), fstream (C++) -->
            <parameter key="Library" value="stdio"/>
            
            <!-- For read/write, Microseconds (default), Milliseconds, Seconds, 
                 Minutes, Hours. open/close always in Microseconds -->
            <parameter key="ProfileUnits" value="Microseconds"/>
            
        </transport>
        
    </io>
</adios-config>
