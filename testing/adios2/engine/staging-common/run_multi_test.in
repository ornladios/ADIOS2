#!/usr/bin/perl
# This script has been build to run the tests in the bin directory.
use Getopt::Long;
use List::Util qw(shuffle);
use strict;
use warnings;

##Parse Args
my $verbose = 0;	# option variable with default value (false)
my $writer_prog = "TestCommonServer";
my $reader_prog = "TestCommonClient";
my @writer_args = ();
my @reader_args = ();
my $num_writers = 3;
my $num_readers = 2;
my $max_readers = 3;
my $test_protocol = 'kill_readers';
my $duration = 60;
my $interval = 5;
my $exit_value = 0;
my $engine = "SST";
my $filename = "CommonStaging";

use File::Basename;
my $my_dirname = dirname(__FILE__);

GetOptions ('verbose!' => \$verbose, 
	    'writer=s' => \$writer_prog,
	    'reader=s' => \$reader_prog,
	    'e=s' => \$engine,
	    'f=s' => \$filename,
	    'warg=s@' => \@writer_args,
	    'rarg=s@' => \@reader_args,
	    'nw=i' => \$num_writers,
	    'nr=i' => \$num_readers,
	    'duration=i' => \$duration,
	    'interval=i' => \$interval,
	    'max_readers=i' => \$max_readers,
	    'test_protocol=s' => \$test_protocol)
  or die("Error in command line arguments\n");


print "Test protocol is $test_protocol\n" if $verbose;

my $writer_output = "";
my $reader_output = "";
my $result = 1;
my $writer_exec_cmd = "@MPIEXEC@ @MPIEXEC_NUMPROC_FLAG@ $num_writers";
my $reader_exec_cmd = "@MPIEXEC@ @MPIEXEC_NUMPROC_FLAG@ $num_readers";

if (("@MPIEXEC@" eq "") or ("@MPIEXEC@" eq "MPIEXEC_EXECUTABLE-NOTFOUND")) {
    # NO MPI
    $writer_exec_cmd = "";
    $reader_exec_cmd = "";
}

defined(my $writer_pid = fork) or die "Cannot fork $!";
unless($writer_pid)
{
    #Child process is here
    my $writer_arg_str = "";
    $writer_arg_str = join(" ", @writer_args) if (@writer_args);
    my $command = "$writer_exec_cmd $my_dirname/$writer_prog $engine $filename " . $writer_arg_str;
    print "TestDriver: EXECwriter $command writer PID $$\n" if $verbose;
    my $result = system (split / /,$command);
    print "TestDriver: System for writer returns ", $result, " \n";
    exit $result;
}
print "TestDriver: Writer PID: $writer_pid\n" if $verbose;
        
my $endtime = time() + $duration;

if ($test_protocol eq "kill_readers") {
  
  my @ReaderPIDs;
  print "TestDriver: Duration at beginning is $duration\n" if $verbose;

  while (time() < $endtime) {
    my $this_start = time();
    my $r = rand();
    print "TestDriver: Start, number of readers is " . scalar(@ReaderPIDs) . ", max readers is $max_readers\n" if $verbose;
    if (((scalar(@ReaderPIDs) <= 0) || ($r < 0.5))  && (scalar(@ReaderPIDs) != $max_readers)){
      # fork a reader
      defined(my $reader_pid = fork) or die "Cannot fork $!";
      unless($reader_pid)
	{
	  #Child process is here
	  print "TestDriver: System( $my_dirname/$reader_prog)\n" if $verbose;
	  my $command = "$reader_exec_cmd $my_dirname/$reader_prog $engine $filename " . join(" ", @reader_args);
	  my $result = system (split / /,$command);
	  print "TestDriver: System for kill_readers Reader returns ", $result, " \n";
	  exit $result;
	}
      print "TestDriver: Reader PID: $reader_pid\n" if $verbose;
      push @ReaderPIDs, $reader_pid;
    } else {
      # kill a reader 
      my $readerToKill;
      @ReaderPIDs = shuffle @ReaderPIDs;
      $readerToKill = shift @ReaderPIDs;
      kill 'KILL', $readerToKill;
      print "TestDriver: KILLED Reader PID: $readerToKill\n" if $verbose;
      waitpid($readerToKill, 0);
      print "TestDriver: Status of killed reader was $?\n" if $verbose;
      if (($? != 0) && ($? != 9)) {
	$exit_value = 1; #failure
	print "TestDriver: Setting failure return because of bad exit status of killed reader\n";
      }
    }
    my $sleep_time = ($this_start + $interval) - time();
    if ($sleep_time > 0) {
	select undef, undef, undef, $sleep_time + 0.0001;
    }
    my $time_remaining = $endtime - time();
    print "TestDriver: TEST TIME REMAINING is $time_remaining \n" if $verbose;
  }
  print "TestDriver: Killing the writer\n" if $verbose;
  system("touch DieTest");
  foreach my $readerPID (@ReaderPIDs) {
      waitpid($readerPID, 0);
      print "TestDriver: Status of final reader was $?\n" if $verbose;
      if ($? != 0) {
#	$exit_value = 1; #failure
	print "TestDriver: Setting failure return because of bad exit status ($?) on normal reader\n";
	print "TestDriver: IGNORING THIS FAILURE!\n";
      }
  }    
  my $ret = waitpid($writer_pid, 0);
  unlink("DieTest");
  print "TestDriver: Status of writer was $? with return value $ret\n" if $verbose;
  if ($? != 0) {
    $exit_value = 1; #failure
    print "TestDriver: Setting failure return because of bad exit status ($?) of writer\n";
  }
  exit $exit_value;
} # end kill_readers protocol

if ($test_protocol eq "one_to_one") {
  
    defined(my $reader_pid = fork) or die "Cannot fork $!";
    unless($reader_pid)
    {
	#Child process is here
	my $command = "$reader_exec_cmd $my_dirname/$reader_prog $engine $filename " . join(" ", @reader_args);
	print "TestDriver: EXECreader $command\n" if $verbose;
	my $result = system (split / /,$command);
	print "TestDriver: System() for one_to_one Reader returned $result\n" if $verbose;
	exit $result;
    }
    print "TestDriver: Reader PID: $reader_pid\n" if $verbose;
    waitpid($reader_pid, 0);
    print "TestDriver: Status of one_to_one reader was $?\n" if $verbose;
    if ($? != 0) {
	$exit_value = 1; 
	print "TestDriver: Setting failure return because of bad exit status ($?) on normal reader\n";
    }
    system("touch DieTest");
    my $ret = waitpid($writer_pid, 0);
    unlink("DieTest");
    print "TestDriver: Status of writer was $? with return value $ret\n" if $verbose;
    if ($? != 0) {
	$exit_value = 1; #failure
	print "TestDriver: Setting failure return because of bad exit status ($?) of writer\n";
    }
    exit $exit_value;

} # end one_to_one protocol

